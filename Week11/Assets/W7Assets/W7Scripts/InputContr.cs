//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerShit/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputContr : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputContr()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerCnt"",
            ""id"": ""f9330008-2c60-4c58-b48c-246f8f6329f9"",
            ""actions"": [
                {
                    ""name"": ""RightArm"",
                    ""type"": ""Value"",
                    ""id"": ""f2497c20-2345-4f63-83b9-e42f1f2536aa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightLeg"",
                    ""type"": ""Value"",
                    ""id"": ""e3c32ea1-e549-49e3-b8d8-3d0fc18856c2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PickUp"",
                    ""type"": ""Button"",
                    ""id"": ""e581ce9e-cbef-4a08-b18b-3b54d3c9c60b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PutDown"",
                    ""type"": ""Button"",
                    ""id"": ""a77fe77d-0884-45b7-9d58-25086614e9f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""82cd3a68-0a93-4f5f-8472-a0ba0b1c4787"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""3f8bb32c-38fb-4583-80e6-4bfc72aa4d79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19f930c5-8386-4179-b3b7-63e92667b760"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38001d43-007b-41a9-b930-0d3a1ee1e444"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightLeg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fcc5315-2a0d-439c-b1d8-19e7187fb50b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""979c51d0-4d54-4b7f-919d-d6965c696269"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PutDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""256ab0dd-ea08-43c4-b653-9fe8129f9186"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b8a950f-dfca-4433-b567-ca0d1bf76c0d"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerCnt
        m_PlayerCnt = asset.FindActionMap("PlayerCnt", throwIfNotFound: true);
        m_PlayerCnt_RightArm = m_PlayerCnt.FindAction("RightArm", throwIfNotFound: true);
        m_PlayerCnt_RightLeg = m_PlayerCnt.FindAction("RightLeg", throwIfNotFound: true);
        m_PlayerCnt_PickUp = m_PlayerCnt.FindAction("PickUp", throwIfNotFound: true);
        m_PlayerCnt_PutDown = m_PlayerCnt.FindAction("PutDown", throwIfNotFound: true);
        m_PlayerCnt_Pause = m_PlayerCnt.FindAction("Pause", throwIfNotFound: true);
        m_PlayerCnt_Interact = m_PlayerCnt.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerCnt
    private readonly InputActionMap m_PlayerCnt;
    private IPlayerCntActions m_PlayerCntActionsCallbackInterface;
    private readonly InputAction m_PlayerCnt_RightArm;
    private readonly InputAction m_PlayerCnt_RightLeg;
    private readonly InputAction m_PlayerCnt_PickUp;
    private readonly InputAction m_PlayerCnt_PutDown;
    private readonly InputAction m_PlayerCnt_Pause;
    private readonly InputAction m_PlayerCnt_Interact;
    public struct PlayerCntActions
    {
        private @InputContr m_Wrapper;
        public PlayerCntActions(@InputContr wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightArm => m_Wrapper.m_PlayerCnt_RightArm;
        public InputAction @RightLeg => m_Wrapper.m_PlayerCnt_RightLeg;
        public InputAction @PickUp => m_Wrapper.m_PlayerCnt_PickUp;
        public InputAction @PutDown => m_Wrapper.m_PlayerCnt_PutDown;
        public InputAction @Pause => m_Wrapper.m_PlayerCnt_Pause;
        public InputAction @Interact => m_Wrapper.m_PlayerCnt_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCnt; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCntActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerCntActions instance)
        {
            if (m_Wrapper.m_PlayerCntActionsCallbackInterface != null)
            {
                @RightArm.started -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnRightArm;
                @RightArm.performed -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnRightArm;
                @RightArm.canceled -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnRightArm;
                @RightLeg.started -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnRightLeg;
                @RightLeg.performed -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnRightLeg;
                @RightLeg.canceled -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnRightLeg;
                @PickUp.started -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPickUp;
                @PickUp.performed -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPickUp;
                @PickUp.canceled -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPickUp;
                @PutDown.started -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPutDown;
                @PutDown.performed -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPutDown;
                @PutDown.canceled -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPutDown;
                @Pause.started -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnPause;
                @Interact.started -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerCntActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerCntActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RightArm.started += instance.OnRightArm;
                @RightArm.performed += instance.OnRightArm;
                @RightArm.canceled += instance.OnRightArm;
                @RightLeg.started += instance.OnRightLeg;
                @RightLeg.performed += instance.OnRightLeg;
                @RightLeg.canceled += instance.OnRightLeg;
                @PickUp.started += instance.OnPickUp;
                @PickUp.performed += instance.OnPickUp;
                @PickUp.canceled += instance.OnPickUp;
                @PutDown.started += instance.OnPutDown;
                @PutDown.performed += instance.OnPutDown;
                @PutDown.canceled += instance.OnPutDown;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerCntActions @PlayerCnt => new PlayerCntActions(this);
    public interface IPlayerCntActions
    {
        void OnRightArm(InputAction.CallbackContext context);
        void OnRightLeg(InputAction.CallbackContext context);
        void OnPickUp(InputAction.CallbackContext context);
        void OnPutDown(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
